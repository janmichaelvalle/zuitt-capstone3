{"ast":null,"code":"var _jsxFileName = \"/Users/mikeevalle/Documents/zuiit-2024/B384/individual-valle/capstone3/src/pages/Products.js\",\n  _s = $RefreshSig$();\nimport ProductCard from '../components/ProductCard';\nimport { useEffect, useState, useContext } from 'react';\nimport UserView from '../components/UserView';\nimport AdminView from '../components/AdminView';\nimport UserContext from '../UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Products() {\n  _s();\n  const {\n    user\n  } = useContext(UserContext);\n\n  // Checks to see if the mock data was captured\n  // console.log(coursesData);\n  // console.log(coursesData[0]);\n\n  // State that will be used to store the courses retrieved from the database\n  const [products, setProducts] = useState([]);\n  const fetchData = () => {\n    let fetchURL = user.isAdmin === true ? `http://localhost:4005/b5/products/all` : `http://localhost:4005/b5/products/`;\n    fetch(fetchURL, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    }).then(res => res.json()).then(data => {\n      console.log(\"Fetched data:\", data); // Log fetched data\n      if (typeof data.message !== \"string\") {\n        console.log(\"Products to set state:\", data.allProducts); // Log products data to be set\n        setProducts(data.allproducts); // Set state to fetched products\n      } else {\n        setProducts([]);\n      }\n    });\n  };\n\n  // Retrieves the courses from the database upon initial render of the \"Courses\" page component.\n  useEffect(() => {\n    fetchData();\n\n    // \tfetch(`http://localhost:4000/courses/all`, {\n    // \t\theaders: {\n    // \t\t\tAuthorization: `Bearer ${localStorage.getItem('token')}`\n    // \t\t}\n    // \t})\n    // \t.then(res => res.json())\n    // \t.then(data => {\n    // \t\tconsole.log(data);\n\n    // \t\tsetCourses(data.courses.map(course => {\n    // \t\t\treturn (\n    // \t\t\t\t<CourseCard key={course._id} courseProp={course} />\n    // \t\t\t\t)\n    // \t\t}))\n    // \t})\n  }, []);\n\n  // The \"map\" method loops through the individual course objects in our array and returns a component for each course\n  // Multiple components created through the map method must have a unique key that will help React JS identify which components/elements have been changed, added or removed\n  // Everytime the map method loops through the data, it creates a \"CourseCard\" component and then passes the current element in our coursesData array using the courseProp\n  // const courses = coursesData.map(course => {\n  // \treturn(\n  // \t\t<CourseCard key={course.id} courseProp={course} />\n  // \t);\n  // })\n\n  // The \"courseProp\" in the CourseCard component is called a \"prop\" which is a shorthand for \"property\" since components are considered as objects in React JS\n  // The curly braces ({}) are used for props to signify that we are providing information using JavaScript expressions rather than hard coded values which use double quotes (\"\")\n  // We can pass information from one component to another component using props. This is referred to as \"props drilling\"\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: user.isAdmin === true ? /*#__PURE__*/_jsxDEV(AdminView, {\n      productsData: products,\n      fetchData: fetchData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 6\n    }, this) : /*#__PURE__*/_jsxDEV(UserView, {\n      productsData: products\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 6\n    }, this)\n  }, void 0, false);\n}\n_s(Products, \"oXQ7P6hNbEUly+gTcjKEV88KAL8=\");\n_c = Products;\nvar _c;\n$RefreshReg$(_c, \"Products\");","map":{"version":3,"names":["ProductCard","useEffect","useState","useContext","UserView","AdminView","UserContext","jsxDEV","_jsxDEV","Fragment","_Fragment","Products","_s","user","products","setProducts","fetchData","fetchURL","isAdmin","fetch","headers","Authorization","localStorage","getItem","then","res","json","data","console","log","message","allProducts","allproducts","children","productsData","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mikeevalle/Documents/zuiit-2024/B384/individual-valle/capstone3/src/pages/Products.js"],"sourcesContent":["\nimport ProductCard from '../components/ProductCard';\nimport { useEffect, useState, useContext } from 'react';\nimport UserView from '../components/UserView';\nimport AdminView from '../components/AdminView';\nimport UserContext from '../UserContext';\n\n\nexport default function Products(){\n\n\tconst {user} = useContext(UserContext)\n\n\t// Checks to see if the mock data was captured\n\t// console.log(coursesData);\n\t// console.log(coursesData[0]);\n\n\t// State that will be used to store the courses retrieved from the database\n\tconst [products, setProducts] = useState([]);\n\n  const fetchData = () => {\n    let fetchURL = user.isAdmin === true \n    ? `http://localhost:4005/b5/products/all`\n    : `http://localhost:4005/b5/products/`;\n\n    fetch(fetchURL, {\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n        }\n    })\n    .then(res => res.json())\n    .then(data => {\n        console.log(\"Fetched data:\", data); // Log fetched data\n        if (typeof data.message !== \"string\"){\n            console.log(\"Products to set state:\", data.allProducts); // Log products data to be set\n            setProducts(data.allproducts); // Set state to fetched products\n        } else {\n            setProducts([]);\n        }\n    });\n};\n\n\n\t// Retrieves the courses from the database upon initial render of the \"Courses\" page component.\n\tuseEffect(() => {\n\n\t\tfetchData()\n\n\t// \tfetch(`http://localhost:4000/courses/all`, {\n\t// \t\theaders: {\n\t// \t\t\tAuthorization: `Bearer ${localStorage.getItem('token')}`\n\t// \t\t}\n\t// \t})\n\t// \t.then(res => res.json())\n\t// \t.then(data => {\n\t// \t\tconsole.log(data);\n\n\t// \t\tsetCourses(data.courses.map(course => {\n\t// \t\t\treturn (\n\t// \t\t\t\t<CourseCard key={course._id} courseProp={course} />\n\t// \t\t\t\t)\n\t// \t\t}))\n\t// \t})\n\t}, [])\n\n\t// The \"map\" method loops through the individual course objects in our array and returns a component for each course\n\t// Multiple components created through the map method must have a unique key that will help React JS identify which components/elements have been changed, added or removed\n\t// Everytime the map method loops through the data, it creates a \"CourseCard\" component and then passes the current element in our coursesData array using the courseProp\n\t// const courses = coursesData.map(course => {\n\t// \treturn(\n\t// \t\t<CourseCard key={course.id} courseProp={course} />\n\t// \t);\n\t// })\n\n\t// The \"courseProp\" in the CourseCard component is called a \"prop\" which is a shorthand for \"property\" since components are considered as objects in React JS\n\t// The curly braces ({}) are used for props to signify that we are providing information using JavaScript expressions rather than hard coded values which use double quotes (\"\")\n\t// We can pass information from one component to another component using props. This is referred to as \"props drilling\"\n\treturn(\n\t\t\n\t\t<>\n\t\t\t{\n\t\t\t\t(user.isAdmin === true) ?\n\t\t\t\t\t<AdminView productsData={products} fetchData={fetchData} />\n\n\t\t\t\t:\n\n\t\t\t\t\t<UserView productsData={products} />\n\t\t\t}\n\t\t</>\n\t\t)\n}"],"mappings":";;AACA,OAAOA,WAAW,MAAM,2BAA2B;AACnD,SAASC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AACvD,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,WAAW,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGzC,eAAe,SAASC,QAAQA,CAAA,EAAE;EAAAC,EAAA;EAEjC,MAAM;IAACC;EAAI,CAAC,GAAGV,UAAU,CAACG,WAAW,CAAC;;EAEtC;EACA;EACA;;EAEA;EACA,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAE3C,MAAMc,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAIC,QAAQ,GAAGJ,IAAI,CAACK,OAAO,KAAK,IAAI,GACjC,uCAAsC,GACtC,oCAAmC;IAEtCC,KAAK,CAACF,QAAQ,EAAE;MACZG,OAAO,EAAE;QACLC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE;MAC3D;IACJ,CAAC,CAAC,CACDC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;MACVC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,IAAI,CAAC,CAAC,CAAC;MACpC,IAAI,OAAOA,IAAI,CAACG,OAAO,KAAK,QAAQ,EAAC;QACjCF,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,IAAI,CAACI,WAAW,CAAC,CAAC,CAAC;QACzDhB,WAAW,CAACY,IAAI,CAACK,WAAW,CAAC,CAAC,CAAC;MACnC,CAAC,MAAM;QACHjB,WAAW,CAAC,EAAE,CAAC;MACnB;IACJ,CAAC,CAAC;EACN,CAAC;;EAGA;EACAd,SAAS,CAAC,MAAM;IAEfe,SAAS,CAAC,CAAC;;IAEZ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;EACA,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA,oBAECR,OAAA,CAAAE,SAAA;IAAAuB,QAAA,EAEGpB,IAAI,CAACK,OAAO,KAAK,IAAI,gBACrBV,OAAA,CAACH,SAAS;MAAC6B,YAAY,EAAEpB,QAAS;MAACE,SAAS,EAAEA;IAAU;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAI3D9B,OAAA,CAACJ,QAAQ;MAAC8B,YAAY,EAAEpB;IAAS;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAErC,CAAC;AAEL;AAAC1B,EAAA,CAjFuBD,QAAQ;AAAA4B,EAAA,GAAR5B,QAAQ;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}