{"ast":null,"code":"var _jsxFileName = \"/Users/mikeevalle/Documents/zuiit-2024/B384/individual-valle/capstone3/src/pages/Logout.js\",\n  _s = $RefreshSig$();\nimport { Navigate } from \"react-router-dom\";\nimport { useContext, useEffect } from \"react\";\nimport UserContext from \"../UserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Logout() {\n  _s();\n  // \"localStorage.clear() clears info in locadStorage ensuring no info is stored in our browser\"\n  // localStorage.clear();\n  const {\n    unsetUser,\n    setUser\n  } = useContext(UserContext);\n\n  // Clear the localStorage of the user's info\n  unsetUser();\n\n  // \n  /* \n    - Placing the \"setUser\" setter function inside of a useEffect is necessary because of updates within reactJS that a state of another component be updated while trying to render a different component\n    - By adding the useEffect, this will allow the Logout page to render first before triggering the useEffect which changes the state of our user\n   */\n  useEffect(() => {\n    // Set the user state back to it's original value\n    setUser({\n      id: null,\n      isAdmin: null\n    });\n  });\n\n  // Redirect back to login\n  return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(Logout, \"x2WCSIKxkTvRrllwX9pqaftgr4A=\");\n_c = Logout;\nvar _c;\n$RefreshReg$(_c, \"Logout\");","map":{"version":3,"names":["Navigate","useContext","useEffect","UserContext","jsxDEV","_jsxDEV","Logout","_s","unsetUser","setUser","id","isAdmin","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mikeevalle/Documents/zuiit-2024/B384/individual-valle/capstone3/src/pages/Logout.js"],"sourcesContent":["import { Navigate } from \"react-router-dom\";\nimport { useContext, useEffect} from \"react\";\nimport UserContext from \"../UserContext\";\n\nexport default function Logout(){\n  // \"localStorage.clear() clears info in locadStorage ensuring no info is stored in our browser\"\n  // localStorage.clear();\n  const { unsetUser, setUser } = useContext(UserContext);\n\n  // Clear the localStorage of the user's info\n  unsetUser();\n\n  // \n  /* \n    - Placing the \"setUser\" setter function inside of a useEffect is necessary because of updates within reactJS that a state of another component be updated while trying to render a different component\n    - By adding the useEffect, this will allow the Logout page to render first before triggering the useEffect which changes the state of our user\n   */\n  useEffect(() => {\n    // Set the user state back to it's original value\n    setUser({\n      id: null,\n      isAdmin: null,\n    })\n  })\n\n  // Redirect back to login\n  return (\n    <Navigate to=\"/login\"/>\n  )\n}"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,UAAU,EAAEC,SAAS,QAAO,OAAO;AAC5C,OAAOC,WAAW,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,eAAe,SAASC,MAAMA,CAAA,EAAE;EAAAC,EAAA;EAC9B;EACA;EACA,MAAM;IAAEC,SAAS;IAAEC;EAAQ,CAAC,GAAGR,UAAU,CAACE,WAAW,CAAC;;EAEtD;EACAK,SAAS,CAAC,CAAC;;EAEX;EACA;AACF;AACA;AACA;EACEN,SAAS,CAAC,MAAM;IACd;IACAO,OAAO,CAAC;MACNC,EAAE,EAAE,IAAI;MACRC,OAAO,EAAE;IACX,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;EACA,oBACEN,OAAA,CAACL,QAAQ;IAACY,EAAE,EAAC;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AAE3B;AAACT,EAAA,CAzBuBD,MAAM;AAAAW,EAAA,GAANX,MAAM;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}